
  
  # Handling Subqueries

The `pql` package uses subqueries to handle complex expressions and operators. The `splitQueries` function is responsible for splitting the input tabular expression into multiple subqueries based on the operators present.

## Splitting the Expression into Subqueries

The `splitQueries` function takes the input tabular expression and recursively splits it into subqueries based on the operators encountered. It returns a slice of `*subquery` objects, with the last element representing the full expression.

The splitting process works as follows:

1. The function iterates over the operators in the tabular expression.
2. For each operator, it determines whether a new subquery needs to be created or if the operator can be attached to the existing subquery.
3. If a new subquery is required, the `chainSubquery` function is called to create a new `*subquery` object, which either reads from the previous subquery or directly from the data source if there is no previous subquery.
4. The operator is then assigned to the appropriate subquery.
5. Special handling is performed for certain operators like `join`, `sort`, `take`, and `top`.

## Subquery Structure

The `subquery` struct represents a single subquery and contains the following fields:

- `name`: A generated name for the subquery, used in the SQL output.
- `sourceSQL`: The SQL code that represents the data source for this subquery.
- `op`: The tabular operator associated with this subquery.
- `sort`: The `SortOperator` object, if present.
- `take`: The `TakeOperator` object, if present.

The `write` method of the `subquery` struct is responsible for generating the SQL code for the subquery based on the operator and other fields.

## Handling Join Expressions

The `splitQueries` function performs special handling for the `join` operator. It generates the SQL code for the join condition and creates a new subquery that represents the joined result. The generated SQL code includes aliases for the left and right tables (`$left` and `$right`) to facilitate the join condition.

## Chaining Subqueries

The `chainSubquery` function is responsible for creating a new subquery that either reads from the previous subquery or directly from the data source if there is no previous subquery. This allows the subqueries to be chained together, with each subquery building upon the previous one.

Overall, the `pql` package uses subqueries to handle complex expressions and operators, splitting the input expression into multiple subqueries as needed and generating the appropriate SQL code for each subquery.
  
  